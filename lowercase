#!/usr/bin/python3

# lowercase - remaps directories and files to kebab-case
# kebab-case was chosen as it is not commonly associated with
# programming languages, so linux filesystem organising seems nice
# intent is to simplify and codify filesystem navigation

import os
import sys

def usage():
  if len(sys.argv) < 2:
    print("""lowercase - a tool to remap directories and files to kebab case.
    usage: lowercase <directory>""")
    sys.exit(1)

def confirmation(argv1):
  confirm = input(f"do you want to rename the following directory tree to kebab-case? [y/n]")
  if confirm.lower() == "y":
    try:
      rename_all(argv1, dirdepth=0)
    except:
      print("Something went wrong while renaming the files.")
  else:
    print("would be a lot cooler if you did.")

def rename(current_name, new_name):
  try:
    os.rename(current_name, new_name)
  except PermissionError as e:
    print("Permission Error: ", e)  

def rename_all(directory, dirdepth=0):
  try:
    # rename root directory
    new_name = directory.strip().lower().replace(" ", "-").replace("_", "-")
    rename(directory, new_name)
    directory = new_name
  except PermissionError as e:
    print("Permission Error: ", e)
    return

  # recursively traverse directories
  for dirpath, dirnames, filenames in os.walk(directory):
    for dirname in dirnames:
      old_name = os.path.join(dirpath, dirname)
      new_name = os.path.join(dirpath, dirname.strip().lower().replace(" ", "-").replace("_", "-"))
      rename(old_name, new_name)
      if dirdepth < 5:
        rename_all(new_name, dirdepth=dirdepth + 1)
    for filename in filenames:
      old_name = os.path.join(dirpath, filename)
      base, ext = os.path.splitext(filename)
      new_name = os.path.join(dirpath, base.strip().lower().replace(" ", "-").replace("_", "-") + ext)
      rename(old_name, new_name)

if __name__ == "__main__":
  if usage():
    argv1 = sys.argv[1]
    confirmation(argv1)